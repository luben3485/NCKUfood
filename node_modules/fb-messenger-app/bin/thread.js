'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _token = new WeakMap();
var _apiUrl = new WeakMap();
var _request = new WeakMap();

/** Class for a Bot Thread configuration */

var Thread = function () {
  function Thread(token, apiUrl, request) {
    _classCallCheck(this, Thread);

    _token.set(this, token);
    _apiUrl.set(this, apiUrl);
    _request.set(this, request);
  }

  _createClass(Thread, [{
    key: 'setGreetingText',
    value: function setGreetingText(text, cb) {
      if (typeof text === 'string') {
        text = { text: text };
      }
      var params = {
        setting_type: 'greeting',
        greeting: text
      };
      this.sendSettingRequest('POST', params, cb);
    }
  }, {
    key: 'setGetStartedButton',
    value: function setGetStartedButton(payload, cb) {
      if (typeof payload === 'string') {
        // Case a string is entered
        payload = [{
          payload: payload
        }];
      }
      var params = {
        setting_type: 'call_to_actions',
        thread_state: 'new_thread',
        call_to_actions: payload // max 1
      };
      this.sendSettingRequest('POST', params, cb);
    }
  }, {
    key: 'setPersistentMenu',
    value: function setPersistentMenu(menuItems, cb) {
      var params = {
        setting_type: 'call_to_actions',
        thread_state: 'existing_thread',
        call_to_actions: menuItems
      };
      this.sendSettingRequest('POST', params, cb);
    }
  }, {
    key: 'deleteGreetingText',
    value: function deleteGreetingText(cb) {
      var params = {
        setting_type: 'greeting'
      };
      this.sendSettingRequest('DELETE', params, cb);
    }
  }, {
    key: 'deleteGetStartedButton',
    value: function deleteGetStartedButton(cb) {
      var params = {
        setting_type: 'call_to_actions',
        thread_state: 'new_thread'
      };
      this.sendSettingRequest('DELETE', params, cb);
    }
  }, {
    key: 'deletePersistentMenu',
    value: function deletePersistentMenu(cb) {
      var params = {
        setting_type: 'call_to_actions',
        thread_state: 'existing_thread'
      };
      this.sendSettingRequest('DELETE', params, cb);
    }
  }, {
    key: 'sendSettingRequest',
    value: function sendSettingRequest(method, params, cb) {
      var req = {
        url: _apiUrl.get(this) + 'me/thread_settings',
        qs: {
          access_token: _token.get(this)
        },
        method: method,
        json: params
      };
      _request.get(this)(req, cb);
    }
  }]);

  return Thread;
}();

exports.default = Thread;