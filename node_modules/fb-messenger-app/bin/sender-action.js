'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _token = new WeakMap();
var _apiUrl = new WeakMap();
var _request = new WeakMap();

/** Class for a Bot Thread configuration */

var SenderAction = function () {
  function SenderAction(token, apiUrl, request) {
    _classCallCheck(this, SenderAction);

    _token.set(this, token);
    _apiUrl.set(this, apiUrl);
    _request.set(this, request);
  }

  _createClass(SenderAction, [{
    key: 'sendMarkSeenInterval',
    value: function sendMarkSeenInterval(recipient, time, cb) {
      var _this = this;

      return new Promise(function (resolve) {
        return setTimeout(function () {
          _this.sendSenderActionRequest(recipient, 'mark_seen', cb);
          resolve();
        }, time);
      });
    }
  }, {
    key: 'sendTypingInterval',
    value: function sendTypingInterval(recipient, time, cb) {
      var _this2 = this;

      this.sendSenderActionRequest(recipient, 'typing_on', cb);
      return new Promise(function (resolve) {
        return setTimeout(function () {
          _this2.sendSenderActionRequest(recipient, 'typing_off', cb);
          resolve();
        }, time);
      });
    }
  }, {
    key: 'sendSenderActionRequest',
    value: function sendSenderActionRequest(recipient, senderAction, cb) {
      var req = {
        url: _apiUrl.get(this) + 'me/messages',
        qs: {
          access_token: _token.get(this)
        },
        method: 'POST',
        json: {
          recipient: {
            id: recipient
          },
          sender_action: senderAction
        }
      };
      _request.get(this)(req, cb);
    }
  }]);

  return SenderAction;
}();

exports.default = SenderAction;