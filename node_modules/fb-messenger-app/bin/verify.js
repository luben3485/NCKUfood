'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.webhook = webhook;
exports.signature = signature;

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function webhook(verifyToken, req, res) {
  if (req.query['hub.verify_token'] === verifyToken) {
    this.emit('webhook-verified', { result: 'Succesfully verified webhook' });
    return res.send(req.query['hub.challenge']);
  } else {
    this.emit('error', new Error('Error: Invalid verify token.'));
  }
}

function signature(appSecret, req, res, buf) {
  var signature = req.headers['x-hub-signature'];

  if (!signature) {
    this.emit('error', new Error("Couldn't validate the request signature."));
  } else {
    var elements = signature.split('=');
    var signatureHash = elements[1];
    var expectedHash = _crypto2.default.createHmac('sha1', appSecret).update(buf).digest('hex');
    if (signatureHash !== expectedHash) {
      this.emit('error', new Error("Couldn't validate the request signature."));
    }
    this.emit('signature-verified', { result: 'Succesfully verified request signature' });
  }
}