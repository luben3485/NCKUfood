'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _request = require('request');

var _request2 = _interopRequireDefault(_request);

var _events = require('events');

var _thread = require('./thread');

var _thread2 = _interopRequireDefault(_thread);

var _senderAction = require('./sender-action');

var _senderAction2 = _interopRequireDefault(_senderAction);

var _verify = require('./verify');

var verify = _interopRequireWildcard(_verify);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _apiUrl_ = 'https://graph.facebook.com/v2.6/';
var _supportedNotificationTypes = ['REGULAR', 'SILENT_PUSH', 'NO_PUSH']; // supported types by fb
var _notificationDefault = 'REGULAR';

var _token = new WeakMap();
var _notificationType = new WeakMap();
var _apiUrl = new WeakMap();

/** Class representing a Facebook Messenger App. */

var Messenger = function (_EventEmitter) {
  _inherits(Messenger, _EventEmitter);

  function Messenger() {
    var token = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, Messenger);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Messenger).call(this));

    if (!token) throw new Error('Facebook Page access token is missing.'); // case bad token
    if (_supportedNotificationTypes.indexOf(options.notificationType) === -1) {
      // case bad notification type
      options.notificationType = _notificationDefault;
    }
    _token.set(_this, token);
    _notificationType.set(_this, options.notificationType);
    _apiUrl.set(_this, options.apiUrl || _apiUrl_);

    _this.threadSetting = new _thread2.default(_token.get(_this), _apiUrl.get(_this), sendRequest);
    _this.senderAction = new _senderAction2.default(_token.get(_this), _apiUrl.get(_this), sendRequest);
    _this.verify = verify;
    return _this;
  }

  _createClass(Messenger, [{
    key: 'getToken',
    value: function getToken() {
      return _token.get(this);
    }
  }, {
    key: 'getApiUrl',
    value: function getApiUrl() {
      return _apiUrl.get(this);
    }
  }, {
    key: 'getNotificationType',
    value: function getNotificationType() {
      return _notificationType.get(this);
    }
  }, {
    key: 'sendApiMessage',
    value: function sendApiMessage(recipient, message, notificationType, cb) {
      if (typeof notificationType === 'function') {
        // case 3rd arg is a func, no notification type was entered but a cb
        cb = notificationType;
        notificationType = _notificationType.get(this);
      }
      if (!notificationType) {
        // case no notification type is entered
        notificationType = _notificationType.get(this);
      }
      var req = {
        url: _apiUrl.get(this) + 'me/messages',
        qs: {
          access_token: _token.get(this)
        },
        method: 'POST',
        json: {
          recipient: {
            id: recipient
          },
          message: message,
          notification_type: notificationType
        }
      };
      sendRequest(req, cb);
    }
  }, {
    key: 'subscribeApp',
    value: function subscribeApp(cb) {
      var req = {
        url: _apiUrl.get(this) + 'me/subscribed_apps',
        qs: {
          access_token: _token.get(this)
        },
        method: 'POST',
        json: true
      };
      sendRequest(req, cb);
    }
  }, {
    key: 'getUserPsid',
    value: function getUserPsid(token, cb) {
      var req = {
        url: _apiUrl.get(this) + 'me',
        qs: {
          access_token: _token.get(this),
          fields: 'recipient',
          account_linking_token: token
        },
        method: 'GET',
        json: true
      };
      sendRequest(req, cb);
    }
  }, {
    key: 'unlinkAccount',
    value: function unlinkAccount(psid, cb) {
      var req = {
        url: _apiUrl.get(this) + 'me/unlink_accounts',
        qs: {
          access_token: _token.get(this)
        },
        method: 'POST',
        json: {
          psid: psid
        }
      };
      sendRequest(req, cb);
    }
  }, {
    key: 'getUserProfile',
    value: function getUserProfile(userId, cb) {
      var req = {
        url: '' + _apiUrl.get(this) + userId,
        qs: {
          access_token: _token.get(this),
          fields: 'first_name,last_name,profile_pic,locale,timezone,gender'
        },
        method: 'GET',
        json: true
      };
      sendRequest(req, cb);
    }
  }, {
    key: '_handleCallback',
    value: function _handleCallback(res, data) {
      var _this2 = this;

      if (data.object === 'page') {
        // check that it's a page subscription
        data.entry.forEach(function (entry) {
          // iterate over {array} entry
          console.log('Callback received from page ' + entry.id + ' at ' + entry.time);

          entry.messaging.forEach(function (event) {
            if (event.message && event.message.is_echo) {
              _this2._handleEvent('echoMessage', event);
            } else if (event.message && event.message.quick_reply) {
              _this2._handleEvent('quickReply', event);
            } else if (event.message && event.message.text) {
              _this2._handleEvent('message', event);
            } else if (event.message && event.message.attachments) {
              event.message.attachments.forEach(function (attachment) {
                _this2._handleEvent(attachment.type, event); // image, audio, video, file or location
              });
            } else if (event.optin) {
              _this2._handleEvent('authentication', event);
            } else if (event.delivery) {
              _this2._handleEvent('delivery', event);
            } else if (event.postback) {
              _this2._handleEvent('postback', event);
            } else if (event.read) {
              _this2._handleEvent('read', event);
            } else if (event.account_linking && event.account_linking.status === 'linked') {
              _this2._handleEvent('accountLinked', event);
            } else if (event.account_linking && event.account_linking.status === 'unlinked') {
              _this2._handleEvent('accountUnlinked', event);
            } else {
              console.error('Webhook received an unknown messaging event: ', JSON.stringify(event));
            }
          });
        });
        // Send back a 200, within 20 seconds, to let FB know that the bot has successfully received the callback.
        // Otherwise, the request will time out.
        res.sendStatus(200);
      } else {
        console.error('Wrong callback object param: must be \'page\' instead of ' + data.object);
      }
    }
  }, {
    key: '_handleEvent',
    value: function _handleEvent(type, event) {
      this.emit(type, event, this.sendApiMessage.bind(this, event.sender.id));
    }
  }]);

  return Messenger;
}(_events.EventEmitter);

var sendRequest = function sendRequest(req, cb) {
  (0, _request2.default)(req, function (error, response, body) {
    if (!cb) return;
    if (error) return cb(error);
    if (response.body.error) return cb(response.body.error);
    cb(null, response.body);
  });
};

exports.default = Messenger;